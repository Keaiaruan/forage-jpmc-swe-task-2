From 3022e1f02670f8336f457078532f98c50f77496e Mon Sep 17 00:00:00 2001
From: Joe Ferrer <joe@theforage.com>
Date: Wed, 1 Mar 2023 00:45:20 +1100
Subject: [PATCH 1/3] Move python files to datafeed dir

---
 requirements.txt => datafeed/requirements.txt | 0
 server.py => datafeed/server3.py              | 0
 datafeed/test.csv                             | 0
 3 files changed, 0 insertions(+), 0 deletions(-)
 rename requirements.txt => datafeed/requirements.txt (100%)
 rename server.py => datafeed/server3.py (100%)
 create mode 100644 datafeed/test.csv

diff --git a/requirements.txt b/datafeed/requirements.txt
similarity index 100%
rename from requirements.txt
rename to datafeed/requirements.txt
diff --git a/server.py b/datafeed/server3.py
similarity index 100%
rename from server.py
rename to datafeed/server3.py
diff --git a/datafeed/test.csv b/datafeed/test.csv
new file mode 100644
index 0000000..e69de29
-- 
2.39.3 (Apple Git-145)


From 9358aad7b5cd8271dd96c632ea3ac92ecfb45c4c Mon Sep 17 00:00:00 2001
From: keaiaruan <rxqxr@outlook.com>
Date: Fri, 26 Jul 2024 23:16:57 +0800
Subject: [PATCH 2/3] Task2

---
 src/App.tsx | 18 +++++++++++++++---
 1 file changed, 15 insertions(+), 3 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..2d117c7 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean;
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,18 +31,28 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if(this.state.showgraph)
+    {return (<Graph data={this.state.data}/>)}
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
+    let x =0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
       // Update the state by creating a new array of data that consists of
       // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
+      this.setState({ 
+        data: serverResponds,
+        showGraph: true, });
     });
+    x++;
+    if (x > 1000){
+      clearInterval(interval);
+    }
+   },100);
   }
 
   /**
-- 
2.39.3 (Apple Git-145)


From 73ebf28f80f256de8fcc45f230eed07d8862e2e9 Mon Sep 17 00:00:00 2001
From: keaiaruan <rxqxr@outlook.com>
Date: Fri, 26 Jul 2024 23:25:19 +0800
Subject: [PATCH 3/3] task2-2

---
 src/Graph.tsx | 14 ++++++++++++--
 1 file changed, 12 insertions(+), 2 deletions(-)

diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..05448f7 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLBRElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -49,6 +49,16 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view','y_line');
+      elem.setAttribute('column-pivots','["stock"]');
+      elem.setAttribute('row-pivots','["timestamp"]');
+      elem.setAttribute('columns','["top_ask_price"]');
+      elem.setAttribute('aggregates', '
+        {"stock":"distinct count",
+        "top_ask_price":"avg",
+        "top_bid_price":"avg",
+        "timestamp":"distinct count"}');
+        );
     }
   }
 
-- 
2.39.3 (Apple Git-145)

